Only in tayga-0.9.2: .deps
Only in tayga-0.9.2: Makefile
Only in tayga-0.9.2: addrmap.o
Only in tayga-0.9.2: conffile.o
Only in tayga-0.9.2: config.h
Only in tayga-0.9.2: config.log
Only in tayga-0.9.2: config.status
diff -drup tayga-0.9.2.org/configure tayga-0.9.2/configure
--- tayga-0.9.2.org/configure	2011-06-10 17:53:18.000000000 +0200
+++ tayga-0.9.2/configure	2012-12-12 10:27:36.000000000 +0100
@@ -697,7 +697,7 @@ pdfdir='${docdir}'
 psdir='${docdir}'
 libdir='${exec_prefix}/lib'
 localedir='${datarootdir}/locale'
-mandir='${datarootdir}/man'
+mandir='${exec_prefix}/man'
 
 ac_prev=
 ac_dashdash=
Only in tayga-0.9.2: configure.orig
Only in tayga-0.9.2: dynamic.o
diff -drup tayga-0.9.2.org/nat64.c tayga-0.9.2/nat64.c
--- tayga-0.9.2.org/nat64.c	2011-05-25 16:11:30.000000000 +0200
+++ tayga-0.9.2/nat64.c	2012-12-12 11:12:22.000000000 +0100
@@ -18,6 +18,7 @@
 #include <tayga.h>
 
 extern struct config *gcfg;
+extern int tx4, tx6;
 
 static uint16_t ip_checksum(void *d, int c)
 {
@@ -119,6 +120,8 @@ static void host_send_icmp4(uint8_t tos,
 	if (writev(gcfg->tun_fd, iov, data_len ? 2 : 1) < 0)
 		slog(LOG_WARNING, "error writing packet to tun device: %s\n",
 				strerror(errno));
+	else
+		tx4++;
 }
 
 static void host_send_icmp4_error(uint8_t type, uint8_t code, uint32_t word,
@@ -190,8 +193,10 @@ static int xlate_payload_4to6(struct pkt
 		if (p->data_len < 8)
 			return -1;
 		tck = (uint16_t *)(p->data + 6);
-		if (!*tck)
-			return -1; /* drop UDP packets with no checksum */
+		if (!*tck) {
+			slog(LOG_WARNING, "xlate_payload_4to6(): UDP drop?\n");
+			//return -1; /* drop UDP packets with no checksum */
+		}
 		break;
 	case 6:
 		if (p->data_len < 20)
@@ -258,8 +263,10 @@ static void xlate_4to6_data(struct pkt *
 	xlate_header_4to6(p, &header.ip6, p->data_len);
 	--header.ip6.hop_limit;
 
-	if (xlate_payload_4to6(p, &header.ip6) < 0)
+	if (xlate_payload_4to6(p, &header.ip6) < 0) {
+		slog(LOG_WARNING, "xlate_payload_4to6() failed\n");
 		return;
+	}
 
 	if (src)
 		src->flags |= CACHE_F_SEEN_4TO6;
@@ -278,6 +285,8 @@ static void xlate_4to6_data(struct pkt *
 		if (writev(gcfg->tun_fd, iov, 2) < 0)
 			slog(LOG_WARNING, "error writing packet to tun "
 					"device: %s\n", strerror(errno));
+		else
+			tx6++;
 	} else {
 		header.ip6_frag.next_header = header.ip6.next_header;
 		header.ip6_frag.reserved = 0;
@@ -315,7 +324,8 @@ static void xlate_4to6_data(struct pkt *
 						"tun device: %s\n",
 						strerror(errno));
 				return;
-			}
+			} else
+				tx6++;
 		}
 	}
 }
@@ -489,8 +499,10 @@ static void xlate_4to6_icmp_error(struct
 		return;
 	}
 
-	if (xlate_payload_4to6(&p_em, &header.ip6_em) < 0)
+	if (xlate_payload_4to6(&p_em, &header.ip6_em) < 0) {
+		slog(LOG_WARNING, "xlate_payload_4to6() failed\n");
 		return;
+	}
 
 	if (map_ip4_to_ip6(&header.ip6.src, &p->ip4->src, NULL)) {
 		if (allow_fake_source)
@@ -525,6 +537,8 @@ static void xlate_4to6_icmp_error(struct
 	if (writev(gcfg->tun_fd, iov, 2) < 0)
 		slog(LOG_WARNING, "error writing packet to tun device: %s\n",
 				strerror(errno));
+	else
+		tx6++;
 }
 
 void handle_ip4(struct pkt *p)
@@ -588,6 +602,8 @@ static void host_send_icmp6(uint8_t tc, 
 	if (writev(gcfg->tun_fd, iov, data_len ? 2 : 1) < 0)
 		slog(LOG_WARNING, "error writing packet to tun device: %s\n",
 				strerror(errno));
+	else
+		tx6++;
 }
 
 static void host_send_icmp6_error(uint8_t type, uint8_t code, uint32_t word,
@@ -678,8 +694,10 @@ static int xlate_payload_6to4(struct pkt
 		if (p->data_len < 8)
 			return -1;
 		tck = (uint16_t *)(p->data + 6);
-		if (!*tck)
-			return -1; /* drop UDP packets with no checksum */
+		if (!*tck) {
+			slog(LOG_WARNING, "xlate_payload_6to4(): UDP drop?\n");
+			//return -1; /* drop UDP packets with no checksum */
+		}
 		break;
 	case 6:
 		if (p->data_len < 20)
@@ -720,8 +738,10 @@ static void xlate_6to4_data(struct pkt *
 	xlate_header_6to4(p, &header.ip4, p->data_len, dest);
 	--header.ip4.ttl;
 
-	if (xlate_payload_6to4(p, &header.ip4) < 0)
+	if (xlate_payload_6to4(p, &header.ip4) < 0) {
+		slog(LOG_WARNING, "xlate_payload_6to4() failed\n");
 		return;
+	}
 
 	if (src)
 		src->flags |= CACHE_F_SEEN_6TO4;
@@ -741,6 +761,8 @@ static void xlate_6to4_data(struct pkt *
 	if (writev(gcfg->tun_fd, iov, 2) < 0)
 		slog(LOG_WARNING, "error writing packet to tun device: %s\n",
 				strerror(errno));
+	else
+		tx4++;
 }
 
 static int parse_ip6(struct pkt *p)
@@ -943,6 +965,8 @@ static void xlate_6to4_icmp_error(struct
 	if (writev(gcfg->tun_fd, iov, 2) < 0)
 		slog(LOG_WARNING, "error writing packet to tun device: %s\n",
 				strerror(errno));
+	else
+		tx4++;
 }
 
 void handle_ip6(struct pkt *p)
Only in tayga-0.9.2: nat64.o
Only in tayga-0.9.2: stamp-h1
Only in tayga-0.9.2: tayga
diff -drup tayga-0.9.2.org/tayga.c tayga-0.9.2/tayga.c
--- tayga-0.9.2.org/tayga.c	2011-05-25 16:11:30.000000000 +0200
+++ tayga-0.9.2/tayga.c	2012-12-12 10:53:32.000000000 +0100
@@ -35,7 +35,7 @@
 "--pidfile FILE     : Write process ID of daemon to FILE\n"
 
 extern struct config *gcfg;
-time_t now;
+time_t now, then;
 
 static int signalfds[2];
 static int use_stdout;
@@ -86,26 +86,34 @@ void read_random_bytes(void *d, int len)
 
 static void tun_setup(int do_mktun, int do_rmtun)
 {
+	char buf[IFNAMSIZ + 4];
 	struct ifreq ifr;
 	int fd;
 
-	gcfg->tun_fd = open("/dev/net/tun", O_RDWR);
+	sprintf(buf, "/dev/%s", gcfg->tundev);
+	gcfg->tun_fd = open(buf, O_RDWR);
 	if (gcfg->tun_fd < 0) {
-		slog(LOG_CRIT, "Unable to open /dev/net/tun, aborting: %s\n",
-				strerror(errno));
+		slog(LOG_CRIT, "Unable to open %s, aborting: %s\n",
+		    gcfg->tundev, strerror(errno));
 		exit(1);
 	}
 
+#if 0
 	memset(&ifr, 0, sizeof(ifr));
 	ifr.ifr_flags = IFF_TUN;
 	strcpy(ifr.ifr_name, gcfg->tundev);
 	if (ioctl(gcfg->tun_fd, TUNSETIFF, &ifr) < 0) {
+#else
+	int i = 1;
+	if (ioctl(gcfg->tun_fd, TUNSIFHEAD, &i) < 0) {
+#endif
 		slog(LOG_CRIT, "Unable to attach tun device %s, aborting: "
 				"%s\n", gcfg->tundev, strerror(errno));
 		exit(1);
 	}
 
 	if (do_mktun) {
+#if 0
 		if (ioctl(gcfg->tun_fd, TUNSETPERSIST, 1) < 0) {
 			slog(LOG_CRIT, "Unable to set persist flag on %s, "
 					"aborting: %s\n", gcfg->tundev,
@@ -124,16 +132,26 @@ static void tun_setup(int do_mktun, int 
 					strerror(errno));
 			exit(1);
 		}
+#endif
 		slog(LOG_NOTICE, "Created persistent tun device %s\n",
 				gcfg->tundev);
 		return;
 	} else if (do_rmtun) {
+		close(gcfg->tun_fd);
+		sprintf(buf, "ifconfig %s destroy", gcfg->tundev);
+		if (system(buf)) {
+			slog(LOG_CRIT, "Unable to destroy %s: %s\n",
+			    gcfg->tundev, strerror(errno));
+			exit(1);
+		}
+#if 0
 		if (ioctl(gcfg->tun_fd, TUNSETPERSIST, 0) < 0) {
 			slog(LOG_CRIT, "Unable to clear persist flag on %s, "
 					"aborting: %s\n", gcfg->tundev,
 					strerror(errno));
 			exit(1);
 		}
+#endif
 		slog(LOG_NOTICE, "Removed persistent tun device %s\n",
 				gcfg->tundev);
 		return;
@@ -188,6 +206,8 @@ static void signal_setup(void)
 	sigaction(SIGTERM, &act, NULL);
 }
 
+int rx4, tx4, rx6, tx6;
+
 static void read_from_tun(void)
 {
 	int ret;
@@ -216,9 +236,11 @@ static void read_from_tun(void)
 	p->data_len = ret - sizeof(struct tun_pi);
 	switch (ntohs(pi->proto)) {
 	case ETH_P_IP:
+		rx4++;
 		handle_ip4(p);
 		break;
 	case ETH_P_IPV6:
+		rx6++;
 		handle_ip6(p);
 		break;
 	default:
@@ -546,6 +568,13 @@ int main(int argc, char **argv)
 			exit(1);
 		}
 		time(&now);
+		if (now > then) {
+			slog(LOG_DEBUG, "4->6: rx4 %d tx6 %d (delta %d)"
+			    " 6->4: rx6 %d tx4 %d (delta %d)\n",
+			    rx4, tx6, rx4 - tx6,
+			    rx6, tx4, rx6 - tx4);
+			then = now;
+		}
 		if (pollfds[0].revents)
 			read_from_signalfd();
 		if (pollfds[1].revents)
Only in tayga-0.9.2: tayga.c.orig
diff -drup tayga-0.9.2.org/tayga.h tayga-0.9.2/tayga.h
--- tayga-0.9.2.org/tayga.h	2011-05-25 16:11:30.000000000 +0200
+++ tayga-0.9.2/tayga.h	2012-12-12 10:27:36.000000000 +0100
@@ -20,7 +20,14 @@
 #include <sys/stat.h>
 #include <sys/ioctl.h>
 #include <sys/socket.h>
+#include <sys/uio.h>
+#include <net/if.h>
+#include <net/ethernet.h>
+#include <net/if_tun.h>
 #include <netinet/in.h>
+#define __KAME_NETINET_IN_H_INCLUDED_
+#include <netinet6/in6.h>
+#undef __KAME_NETINET_IN_H_INCLUDED_
 #include <arpa/inet.h>
 #include <unistd.h>
 #include <stdlib.h>
@@ -31,14 +38,30 @@
 #include <syslog.h>
 #include <errno.h>
 #include <time.h>
+#if 0
 #include <linux/if.h>
 #include <linux/if_tun.h>
 #include <linux/if_ether.h>
+#endif
 
 #include "list.h"
 #include "config.h"
 
 
+/* XXX MARKO */
+#define s6_addr8  __u6_addr.__u6_addr8
+#define s6_addr16 __u6_addr.__u6_addr16
+#define s6_addr32 __u6_addr.__u6_addr32
+
+#define	ETH_P_IP	AF_INET
+#define	ETH_P_IPV6	AF_INET6
+
+struct tun_pi {
+	unsigned short flags;
+	unsigned short proto;
+};
+
+
 /* Configuration knobs */
 
 /* Number of seconds of silence before a map ages out of the cache */
Only in tayga-0.9.2: tayga.h.orig
Only in tayga-0.9.2: tayga.o
